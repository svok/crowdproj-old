package com.crowdproj.web.controller;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.security.Principal;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import org.springframework.messaging.handler.annotation.MessageMapping;
import org.springframework.messaging.handler.annotation.SendTo;
import org.springframework.messaging.handler.annotation.MessageExceptionHandler;
import org.springframework.messaging.simp.annotation.SendToUser;
import org.springframework.messaging.simp.annotation.SubscribeMapping;

@Controller
public class WsController {

    private static final Logger logger = LoggerFactory.getLogger(WsController.class);

/*
    @Autowired
    public WsController(PortfolioService portfolioService, TradeService tradeService) {
        this.portfolioService = portfolioService;
        this.tradeService = tradeService;
    }

    @MessageMapping("/hello")
    public String handle(String greeting) {
        return "[" + System.currentTimeMillis() + ": " + greeting;
    }
*/

    @RequestMapping(value = "/heigh", method = RequestMethod.GET)
    public String displayRequestPage()
    {
        logger.debug("made it to controller");
        return "helloworld";

    }


    @MessageMapping("/hello" )
    @SendTo("/topic/greetings")
    public String greeting(String test) throws Exception {
        logger.debug("made it to websocket");
        Thread.sleep(2000);
        return test + ": OK!";
    }

    @SubscribeMapping("/positions")
//    public String getPositions(Principal principal) throws Exception {
    public String getPositions() throws Exception {
        logger.debug("Positions <<>> ");
        return "XX <<OO>>";
    }

    @MessageExceptionHandler
    @SendToUser("/queue/errors")
    public String handleException(Throwable exception) {
        return exception.getMessage();
    }
}


/**
 * Created by rodrigo.chaves on 20/06/2017.
@RestController
@RequestMapping("/accounts")
public class AccountController {

    private final ReactiveAccountRepository reactiveAccountRepository;

    public AccountController(ReactiveAccountRepository reactiveAccountRepository) {
        this.reactiveAccountRepository = reactiveAccountRepository;
    }

    @RequestMapping(value = "/search/bycurrency", method = RequestMethod.GET)
    Flux<Account> findByCurrency(@RequestParam String currency) {
        return reactiveAccountRepository.findByCurrency(Currency.fromValue(currency));
    }

    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    Mono<Account> findById(@PathVariable String id) {
        return reactiveAccountRepository.findById(id);
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    Mono<Account> save(@RequestBody Account account) {
        return reactiveAccountRepository.save(account);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    Flux<Account> findAll() {
        return reactiveAccountRepository.findAll();
    }
}
 */
